#!/usr/bin/env python3

import argparse
import sys
import operator
import os
import copy
import json

from grimoire.sequence import DNA
from grimoire.feature import Feature, mRNA, Gene, FeatureTable
from grimoire.genome import Reader
import grimoire.io as gio

## Command line stuff ##

extended_help = """

haman is used for converting chromosome-based genomic data into smaller pieces.
This is useful in a training environment when you want to create cross
validation training and testing sets or when you want a minimal set for
tutorials and functional tests.

Segmenting by percent keeps the first x% of the genome and saves as <out>.fa
and <out.gff>.

Segmenting by gene focuses protein-coding genes. Output is fasta and gff in the
<out> directory. Sequence and coordinates are converted to plus strand.

"""

parser = argparse.ArgumentParser(
	description='Segments chromosome sequences and features.',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=extended_help)
parser.add_argument('fasta', type=str, metavar='<fasta>',
	help='path to input fasta file')
parser.add_argument('gff', type=str, metavar='<gff>',
	help='path to input GFF3 (or similar) file')
parser.add_argument('method', type=str, metavar='<method>',
	help='pcg|pct')
parser.add_argument('out', type=str, metavar='<out>',
	help='output name (file or dir)')
parser.add_argument('--pct', required=False, type=int, default=1.0,
	metavar='<int>', help='for use with percent segmenting [%(default).3f]')
parser.add_argument('--source', required=False, type=str,
	metavar='<str>', help='rule-based parsing based on gff source')
parser.add_argument('--padding', required=False, type=int, default=100,
	metavar='<int>', help='start of first feature [%(default)d]')
parser.add_argument('--issuesok', action='store_true',
	help='include genes with non-canoinical issues')
parser.add_argument('--plus', action='store_true',
	help='convert all genes to positive strand')
arg = parser.parse_args()


class HamanError(Exception):
	pass


def segment_by_protein_coding_gene():

	if os.path.exists(arg.out):
		raise HamanError('output dir exists, will not overwrite')
	os.mkdir(arg.out)

	genome = Reader(gff=arg.gff, fasta=arg.fasta)
	idx = 0
	for chrom in genome:
		for gene in chrom.ftable.build_genes():
			if not gene.is_coding(): continue
			if gene.issues and not arg.issuesok: continue
			beg = gene.beg - arg.padding -1
			end = gene.end + arg.padding -1
			if gene.beg < 1 or gene.end >= len(chrom.seq): continue

			idx += 1

			# fasta
			name = f'ch.{idx}' # database name
			seq = chrom.seq[beg:end+1]
			desc = f'{chrom.name}:{beg}-{end} {gene.strand} {gene.id}'
			dna = DNA(name=name, seq=seq, desc=desc)

			# gff
			stuff = chrom.ftable.fetch(beg, end)
			keep = []
			for f in stuff:
				if f.beg > beg and f.end < end: keep.append(f)

			for f in keep:
				nbeg = f.beg - beg
				nend = f.end - beg
				dna.ftable.add_feature(Feature(dna, nbeg, nend,
					f.strand, f.type, phase=f.phase,
					score=f.score, source=f.source, id=f.id, pid=f.pid))

			# convert to plus strand as necessary
			if gene.strand == '-' and arg.plus: dna.revcomp()

			# output
			ffp = open(f'{arg.out}/{name}.fa', 'w+')
			ffp.write(dna.fasta())
			ffp.close()

			gfp = open(f'{arg.out}/{name}.gff3', 'w+')
			for f in dna.ftable.features:
				gfp.write(f.gff())
				gfp.write('\n')
			gfp.close()


def segment_by_percent():
	FRACTION = arg.pct / 100

	chrom = {}
	with open(f'{arg.out}.fa', 'w') as fp:
		for entry in gio.FASTA_stream(filename=arg.fasta):
			l = int(len(entry.seq) * FRACTION)
			chrom[entry.id] = entry.seq[0:l]
			fp.write(f'>{entry.id} 1..{l+1}\n')
			for i in range(0, len(chrom[entry.id]), 50):
				fp.write(f'{chrom[entry.id][i:i+50]}\n')

	with open(f'{arg.out}.gff', 'w') as fp:
		for gff in gio.GFF_stream(filename=arg.gff):
			limit = len(chrom[gff.chrom])
			if gff.beg < limit and gff.end < limit:
				fp.write(f'{gff}')

## CLI ##

if   arg.method == 'pcg': segment_by_protein_coding_gene()
elif arg.method == 'pct': segment_by_percent()
else: raise HamanError('unknown method: ' + arg.method)
