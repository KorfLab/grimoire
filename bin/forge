#!/usr/bin/env python3

import argparse
import sys
import json
import copy

import grimoire.toolbox as toolbox
import grimoire.hmm as hmm
import grimoire.decode as decode
from grimoire.sequence import DNA
from grimoire.genome import Genome, Feature

## Command line stuff ##

parser = argparse.ArgumentParser(description='HMM trainer for genes')
parser.add_argument('--fasta', required=True, type=str,
	metavar='<path>', help='path to fasta file (%(type)s)')
parser.add_argument('--gff3', required=True, type=str,
	metavar='<path>', help='path to GFF3 file (%(type)s)')
parser.add_argument('--model', required=True, type=str,
	metavar='<model>', help='internal_exon|splicing|mRNA')
parser.add_argument('--hmm', required=False, type=str,
	metavar='<path>', help='output HMM file (%(type)s)')
parser.add_argument('--source', required=False, type=str,
	metavar='<name>', help='output sources to <name>.fasta, <name>.gff (%(type)s)')
parser.add_argument('--null_ctx', required=False, type=int, default=0,
	metavar='<int>', help='null model context [%(default)d]')
parser.add_argument('--acc_len', required=False, type=int, default=5,
	metavar='<int>', help='acceptor length [%(default)d]')
parser.add_argument('--acc_ctx', required=False, type=int, default=0,
	metavar='<int>', help='acceptor context [%(default)d]')
parser.add_argument('--don_len', required=False, type=int, default=5,
	metavar='<int>', help='donor length [%(default)d]')
parser.add_argument('--don_ctx', required=False, type=int, default=0,
	metavar='<int>', help='donor context [%(default)d]')
parser.add_argument('--exon_ctx', required=False, type=int, default=0,
	metavar='<int>', help='exon context [%(default)d]')
parser.add_argument('--gen_ctx', required=False, type=int, default=0,
	metavar='<int>', help='genomic context [%(default)d]')
parser.add_argument('--int_ctx', required=False, type=int, default=0,
	metavar='<int>', help='intron context [%(default)d]')
parser.add_argument('--u5_len', required=False, type=int, default=5,
	metavar='<int>', help='UTR5 length [%(default)d]')
parser.add_argument('--u5_ctx', required=False, type=int, default=0,
	metavar='<int>', help='UTR5 context [%(default)d]')
parser.add_argument('--u3_len', required=False, type=int, default=5,
	metavar='<int>', help='UTR3 length [%(default)d]')
parser.add_argument('--u3_ctx', required=False, type=int, default=0,
	metavar='<int>', help='UTR3 context [%(default)d]')
parser.add_argument('--koz_len', required=False, type=int, default=5,
	metavar='<int>', help='Kozak length [%(default)d]')
parser.add_argument('--koz_ctx', required=False, type=int, default=0,
	metavar='<int>', help='Kozak context [%(default)d]')
parser.add_argument('--atg_ctx', required=False, type=int, default=0,
	metavar='<int>', help='ATG context [%(default)d]')
parser.add_argument('--cds_ctx', required=False, type=int, default=0,
	metavar='<int>', help='CDS context [%(default)d]')
parser.add_argument('--replicant', action='store_true',
	help='perform replicant analysis (model vs source)')
arg = parser.parse_args()

ff = toolbox.FASTA_file(arg.fasta)
gf = toolbox.GFF_file(arg.gff3)

###############
## Functions ##
###############

class ForgeError(Exception):
	pass

def make_source(name, comps):
	seq = ''
	features = []
	for comp in comps: seq += comp['seq']
	dna = DNA(seq=seq, name=name)
	beg, end = 1, None
	for comp in comps:
		end = beg + len(comp['seq']) - 1
		features.append(Feature(dna, beg, end, '+', comp['label']))
		beg += len(comp['seq'])
	return {'dna':dna, 'features':features}

#############
## Globals ##
#############

sources = [] # used for outputting sources and performing replicant analysis
model = None # used for outputting HMM and perforing replicant analysis

############################
## Model Building Section ##
############################

if arg.model == 'internal_exon':
	gen = Genome(gff3=arg.gff3, fasta=arg.fasta)
	acc_seqs = []
	don_seqs = []
	exon_seqs = []
	exon_len = 0
	splices = 0
	
	for chr in gen.chromosomes:
		for gene in chr.features:
			if not gene.mRNAs(): continue # some tx are miRNA etc
			tx = gene.mRNAs()[0]
			if gene.issues: continue
			if len(gene.mRNAs()) > 1: continue
			if len(tx.exons) < 3: continue
			
			rcount = 0
			for i in range(1, len(tx.exons) -1):
				iprev = tx.introns[i-1].seq_str()
				inext = tx.introns[i].seq_str()
				
				acc_seq = iprev[-arg.acc_len:len(iprev)]
				exon_seq = tx.exons[i].seq_str()
				don_seq = inext[0:arg.don_len]
				
				acc_seqs.append(acc_seq)
				exon_seqs.append(exon_seq)
				don_seqs.append(don_seq)
				
				splices += 1
				exon_len += tx.exons[i].end - tx.exons[i].beg + 1
				
				if arg.source or arg.replicant:
					rcount += 1
					sources.append(make_source(tx.id + '-region-' + str(rcount),
						[{'label':'ACC', 'seq':acc_seq},
						{'label':'EXON', 'seq':exon_seq},
						{'label':'DON', 'seq':don_seq}]))

	acc_emits = hmm.train_emissions(acc_seqs, context=arg.acc_ctx)
	don_emits = hmm.train_emissions(don_seqs, context=arg.don_ctx)
	exon_emits = hmm.train_emission(exon_seqs, context=arg.exon_ctx)
	
	acc_states = hmm.state_factory('ACC', acc_emits)
	don_states = hmm.state_factory('DON', don_emits)
	exon_state = hmm.State(name='EXON', context=arg.exon_ctx, emits=exon_emits)
	acc_states[0].init = 1
	don_states[arg.don_len-1].term = 1

	hmm.connect_all(acc_states)
	hmm.connect2(acc_states[-1], exon_state, 1)
	hmm.connect2(exon_state, exon_state, 1 - splices/exon_len)
	hmm.connect2(exon_state, don_states[0], splices/exon_len)
	hmm.connect_all(don_states)
	
	null_emits = hmm.train_emission(chr.seq, context=arg.null_ctx)	
	null_state = hmm.State(name='NULL', context=arg.null_ctx, emits=null_emits)
	null_state.init = 1
	null_state.term = 1
	hmm.connect2(null_state, null_state, 1)
	
	model = hmm.HMM(name=arg.hmm, states=acc_states + [exon_state] + don_states,
		null = null_state)

elif arg.model == 'splicing':
	gen = Genome(gff3=arg.gff3, fasta=arg.fasta)
	exp_seqs = []
	exn_seqs = []
	don_seqs = []
	acc_seqs = []
	int_seqs = []
	txa = []
	exon_len = 0
	splices = 0
	intron_len = 0
	for chr in gen.chromosomes:
		for gene in chr.features:
			if not gene.mRNAs(): continue # some tx are miRNA etc
			tx = gene.mRNAs()[0]
			if gene.issues: continue
			if len(gene.mRNAs()) > 1: continue
			if len(tx.exons) < 2: continue
			
			rcount = 0
			for i in range(len(tx.exons) - 1):
				exp_seq = tx.exons[i].seq_str()
				exn_seq = tx.exons[i + 1].seq_str()
				iseq = tx.introns[i].seq_str()
				don_seq = iseq[0:arg.don_len]
				int_seq = iseq[arg.don_len:-arg.acc_len]
				acc_seq = iseq[-arg.acc_len:len(iseq)]
				
				exp_seqs.append(exp_seq)
				don_seqs.append(don_seq)
				int_seqs.append(int_seq)
				acc_seqs.append(acc_seq)
				exn_seqs.append(exn_seq)
				
				intron_len += len(int_seq)
				exon_len += len(exp_seq)
				splices += 1
				
				if arg.source or arg.replicant:
					rcount += 1
					sources.append(make_source(tx.id + '-region-' + str(rcount),
						[{'label':'EXP', 'seq':exp_seq},
						{'label':'DON', 'seq':don_seq},
						{'label':'INT', 'seq':int_seq},
						{'label':'ACC', 'seq':acc_seq},
						{'label':'EXN', 'seq':exn_seq}]))
	
	exp_emits = hmm.train_emission(exp_seqs, context=arg.exon_ctx)
	don_emits = hmm.train_emissions(don_seqs, context=arg.don_ctx)
	int_emits = hmm.train_emission(int_seqs, context=arg.int_ctx)
	acc_emits = hmm.train_emissions(acc_seqs, context=arg.acc_ctx)
	exn_emits = hmm.train_emission(exn_seqs, context=arg.exon_ctx)
	
	exp_state = hmm.State(name='EXP', context=arg.exon_ctx, emits=exp_emits)
	exp_state.init = 1
	don_states = hmm.state_factory('DON', don_emits)
	int_state = hmm.State(name='INT', context=arg.int_ctx, emits=int_emits)
	acc_states = hmm.state_factory('ACC', acc_emits)
	exn_state = hmm.State(name='EXN', context=arg.exon_ctx, emits=exn_emits)
	exn_state.term = 1
	
	hmm.connect2(exp_state, exp_state, 1 - splices/exon_len)
	hmm.connect2(exp_state, don_states[0], splices/exon_len)
	hmm.connect_all(don_states)
	hmm.connect2(don_states[arg.don_len-1], int_state, 1)
	hmm.connect2(int_state, int_state, 1 - splices/intron_len)
	hmm.connect2(int_state, acc_states[0], splices/intron_len)
	hmm.connect_all(acc_states)
	hmm.connect2(acc_states[arg.acc_len-1], exn_state, 1)
	hmm.connect2(exn_state, exn_state, 1)
	
	null_emits = hmm.train_emission(chr.seq, context=arg.null_ctx)	
	null_state = hmm.State(name='NULL', context=arg.null_ctx, emits=null_emits)
	null_state.init = 1
	null_state.term = 1
	hmm.connect2(null_state, null_state, 1)
	
	model = hmm.HMM(name=arg.hmm, null=null_state,
		states=[exp_state] + don_states + [int_state] + acc_states + [exn_state])

elif arg.model == 'mRNA':
	gen = Genome(gff3=arg.gff3, fasta=arg.fasta)
	u5_seqs = []
	koz_seqs = []
	atg_seqs = []
	cds_seqs = []
	u3_seqs = []
	txa = []
	u5_len = 0
	mRNAs = 0
	cds_len = 0
	for chr in gen.chromosomes:
		for gene in chr.features:
			if not gene.mRNAs(): continue # some tx are miRNA etc
			tx = gene.mRNAs()[0]
			if gene.issues: continue
			if len(gene.mRNAs()) > 1: continue
			
			cds = tx.cds_str()
			ptx = tx.tx_str()
			beg = ptx.find(cds)
			end = beg + len(cds)
			if beg < arg.u5_ctx + arg.koz_len: continue
			if len(ptx) - end < arg.u3_ctx: continue
			
			u5_seq = ptx[0 : beg - arg.koz_len]
			koz_seq = ptx[beg-arg.koz_len:beg]
			atg_seq = cds[0:3]
			cds_seq = cds[3:len(cds)]
			u3_seq = ptx[end:len(ptx)]
			
			u5_seqs.append(u5_seq)
			koz_seqs.append(koz_seq)
			atg_seqs.append(atg_seq)
			cds_seqs.append(cds_seq)
			u3_seqs.append(u3_seq)
			
			u5_len += len(u5_seq)
			cds_len += len(cds) - 3
			mRNAs += 1
			
			if arg.source or arg.replicant:
				sources.append(make_source(tx.id + '-cDNA',
					[{'label':'UTR5', 'seq':u5_seq},
					{'label':'KOZ', 'seq':koz_seq},
					{'label':'ATG', 'seq':atg_seq},
					{'label':'CDS', 'seq':cds_seq},
					{'label':'UTR3', 'seq':u3_seq}]))

					
	u5_emits = hmm.train_emission(u5_seqs, context=arg.u5_ctx)
	koz_emits = hmm.train_emissions(koz_seqs, context=arg.koz_ctx)
	atg_emits = hmm.train_emissions(atg_seqs, context=arg.atg_ctx)
	cds_emits = hmm.train_cds(cds_seqs, context=arg.cds_ctx)
	u3_emits = hmm.train_emission(u3_seqs, context=arg.u3_ctx)
	
	u5_state = hmm.State(name='UTR5', context=arg.u5_ctx, emits=u5_emits)
	koz_states = hmm.state_factory('KOZ', koz_emits)
	atg_states = hmm.state_factory('ATG', atg_emits)
	cds_states = hmm.state_factory('CDS', cds_emits)
	u3_state = hmm.State(name='UTR3', context=arg.u3_ctx, emits=u3_emits)
	u5_state.init = 1
	u3_state.term = 1

	hmm.connect2(u5_state, u5_state, 1 - mRNAs/u5_len)
	hmm.connect2(u5_state, koz_states[0], mRNAs/u5_len)
	hmm.connect_all(koz_states)
	hmm.connect2(koz_states[-1], atg_states[0], 1)
	hmm.connect_all(atg_states)
	hmm.connect2(atg_states[-1], cds_states[0], 1)
	hmm.connect_all(cds_states)
	hmm.connect2(cds_states[2], cds_states[0], 1 - mRNAs / (cds_len/3))
	hmm.connect2(cds_states[2], u3_state, mRNAs / (cds_len/3))
	
	null_emits = hmm.train_emission(chr.seq, context=arg.null_ctx)	
	null_state = hmm.State(name='NULL', context=arg.null_ctx, emits=null_emits)
	null_state.init = 1
	null_state.term = 1
	hmm.connect2(null_state, null_state, 1)
	
	model = hmm.HMM(name=arg.hmm, states=[u5_state] + koz_states + atg_states
		+ cds_states + [u3_state], null=null_state)

else:
	print('unrecognized model name')
	sys.exit(1)

########################
## Post-build Actions ##
########################

if arg.hmm:
	model.write(arg.hmm)

if arg.source:
	with open(arg.source + '.fasta', 'w+') as file:
		for source in sources:
			file.write(source['dna'].fasta())
	with open(arg.source + '.gff', 'w+') as file:
		for source in sources:
			for f in source['features']:
				file.write(f.gff() + '\n')

if arg.replicant:
	model.convert2log() # note from here down, the model is log-space
	for source in sources:
		print(source['dna'])
		for f in source['features']:
			print(f)
		
		v = decode.Viterbi(model=model, dna=source['dna'])
		p = v.generate_path()
		features = p.features()
		for f in features:
			print(f)
		
		raise ForgeError('stopped here')

