#!/usr/bin/env python3

import argparse
import re
import sys

import grimoire.io as io

extended_help = """
%(prog)s is used for sanitizing annotation file formats to ensure that
they work with grimoire. Currently, the only types of features used are
of the following types:

	gene - a feature that groups mRNA transcripts
	mRNA - a feature that groups exons and CDSs
	exon - the part of the mRNA not spliced into introns
	CDS  - the part of the mRNA that codes for protein

The following sources are supported:

	wb   - WormBase GFF3 (tested with WS270)
	fb6   - FlyBase GFF3 (tested with release 6)
	t10 - TAIR GFF3 (tested with TAIR10)
	a11   - Araport bed12 (tested with araport11)
	gtf  - Ensemble-based GTF (tested with WS271)
	
%(prog)s reads from STDIN and writes to STDOUT, so make sure you pipe
to %(prog)s and redirect its output to the file you want.

	cat dirty.gff | %(prog)s --source <tag> > clean.gff
	gunzip -c dirty.gff.gz | %(prog)s --source <tag> > clean.gff
"""

parser = argparse.ArgumentParser(
	description='Annotation file sanitizer.',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=extended_help)
parser.add_argument('--mode', required=True, type=str,
	metavar='<string>', help='wb|fb|tair|ap|gtf')
arg = parser.parse_args()

class KalkiError(Exception):
	pass

types = {
	'gene' : True,
	'mRNA' : True,
	'exon' : True,
	'CDS' : True,
}

def convert_as_wormbase270():
	for line in sys.stdin:
		if line[0:1] == '#': continue
		col = line.rstrip().split('\t')
		if col[1] == 'WormBase' and col[2] in types:
			m = re.search('pseudogene', col[8], re.IGNORECASE)
			if m: continue
			print(line, end='')

def convert_as_flybase6():
	for line in sys.stdin:
		if line[0:1] == '#':
			if line[0:7] == '##FASTA':break
			else: continue
		col = line.rstrip().split('\t')
		if col[1] == 'FlyBase' and col[2] in types:
			# SO:0000043 is the SO tag for 'processed_psedudogene'
			m = re.search('SO:0000043', col[8])
			if m: continue
			print(line, end='')

def convert_as_tair10():
	for line in sys.stdin:
		if line[0:1] == '#': continue
		col = line.rstrip().split('\t')
		if col[2] in types:
			m = re.search('pseud', col[2])
			if m: continue
#			col[8] = re.sub(',\S+Protein;', '', col[8])
			print('\t'.join(col))

def convert_as_araport11():
	genes = {}
	for line in sys.stdin:
		col = line.split('\t')
		if len(col) < 12: continue
		chr_id = col[0]
		chr_beg = int(col[1]) + 1
		chr_end = int(col[2])
		txid = col[3]
		score = col[4]
		strand = col[5]
		cds_beg = int(col[6]) + 1
		cds_end = int(col[7])
		rgb = col[8]
		n = int(col[9])
		sizes = col[10].split(',')
		starts = col[11].split(',')
		gid = re.search('(\w+)\.\d+', txid)[1]
		attr = 'ID=' + txid + ';Parent=' + gid

		# create the gene entry if necessary
		if gid not in genes:
			print('\t'.join([chr_id, 'araport', 'gene', str(chr_beg),
				str(chr_end), score, strand, '.', 'ID='+gid]))
			genes[gid] = True

		# create the mRNA entry
		print('\t'.join([chr_id, 'araport', 'mRNA', str(chr_beg),
			str(chr_end), score, strand, attr]))

		# create the exons and CDS
		for i in range(n):
			beg = chr_beg + int(starts[i])
			end = beg + int(sizes[i]) -1
			attr = 'Parent=' + txid
			print('\t'.join([chr_id, 'araport', 'exon', str(beg), str(end),
				score, strand, ',', attr]))
			if beg <= cds_end and end >= cds_beg:
				cb, ce = None, None
				if beg > cds_beg: cb = beg
				else:             cb = cds_beg
				if end > cds_end: ce = cds_end
				else:             ce = end
				print('\t'.join([chr_id, 'araport', 'CDS', str(cb),
					str(ce), score, strand, '.', attr]))

def convert_as_gtf():
	gffs = []
	stops = []

	for line in sys.stdin:
		if line[0:1]=='#': continue
		col = line.rstrip().split('\t')
		if col[2] == 'gene':
			id = re.search('gene_id "(\S+)"', col[8])[1]
			col[8] = 'id=' + id
			gffs.append(col)
		elif col[2] == 'transcript':
			pid = re.search('gene_id "(\S+)"', col[8])[1]
			tid = re.search('transcript_id "(\S+)"', col[8])[1]
			col[2] = 'mRNA'
			col[8] = 'id=' + tid + ';parent_id=' + pid
			gffs.append(col)
		elif col[2] == 'exon' or col[2] == 'CDS':
			pid = re.search('transcript_id "(\S+)"', col[8])[1]
			col[8] = 'parent_id=' + pid
			gffs.append(col)
		elif col[2] == 'stop_codon':
			stops.append(col[3])
	
	for gff in gffs:
		if gff[2] == 'CDS':
			if gff[6] == '+':
				end = int(gff[4])
				if str(end + 1) in stops:
					gff[4] = str(end + 3)
			elif gff[6] == '-':
				beg = int(gff[3])
				if str(beg -3) in stops:
					gff[3] = str(beg -3)

	for gff in gffs:
		print('\t'.join(gff))


if __name__ == '__main__':
	if   arg.mode == '270': convert_as_wormbase270()
	elif arg.mode == 'fb6': convert_as_flybase6()
	elif arg.mode == 't10': convert_as_tair10()
	elif arg.mode == 'a11': convert_as_araport11()
	elif arg.mode == 'gtf': convert_as_gtf()
	else: raise KalkiError('unrecognized source: ' + arg.source)
	
