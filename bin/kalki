#!/usr/bin/env python3

import argparse
import re
import sys

import grimoire.toolbox as toolbox

extended_help = """
%(prog)s is used for sanitizing annotation file formats to ensure that
they work with grimoire. Currently, the only types of features used are
of the following types:

	gene - a feature that groups mRNA transcripts
	mRNA - a feature that groups exons and CDSs
	exon - the part of the mRNA not spliced into introns
	CDS  - the part of the mRNA that codes for protein

The following sources are supported:

	wb   - WormBase GFF3 (tested with WS270)
	fb   - FlyBase GFF3 (tested with release 6)
	tair - TAIR GFF3 (tested with TAIR10)
	ap   - Araport bed12 (tested with araport11)
	gtf  - Ensemble-based GTF
	
%(prog)s reads from STDIN and writes to STDOUT, so make sure you pipe
to %(prog)s and redirect its output to the file you want.

	cat dirty.gff | %(prog)s --source <tag> > clean.gff
	gunzip -c dirty.gff.gz | %(prog)s --source <tag> > clean.gff
"""

parser = argparse.ArgumentParser(
	description='Annotation file sanitizer.',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=extended_help)
parser.add_argument('--source', required=True, type=str,
	metavar='<string>', help='wb|fb|tair|ap|gtf')
arg = parser.parse_args()

class KalkiError(Exception):
	pass

types = {
	'gene' : True,
	'mRNA' : True,
	'exon' : True,
	'CDS' : True,
}


def convert_from_wormbase():
	for line in sys.stdin:
		if line[0:1] == '#': continue
		col = line.rstrip().split('\t')
		if col[1] == 'WormBase' and col[2] in types:
			m = re.search('pseudogene', col[8], re.IGNORECASE)
			if m: continue
			print(line, end='')

def convert_from_flybase():
	for line in sys.stdin:
		if line[0:1] == '#':
			if line[0:7] == '##FASTA':break
			else: continue
		col = line.rstrip().split('\t')
		if col[1] == 'FlyBase' and col[2] in types:
			# SO:0000043 is the SO tag for 'processed_psedudogene'
			m = re.search('SO:0000043', col[8])
			if m: continue
			print(line, end='')

def convert_from_tair():
	for line in sys.stdin:
		if line[0:1] == '#': continue
		col = line.rstrip().split('\t')
		if col[2] in types:
			m = re.search('pseud', col[2])
			if m: continue
			print(line, end='')

def convert_from_araport():
	genes = {}
	for line in sys.stdin:
		col = line.split('\t')
		if len(col) < 12: continue
		chr_id = col[0]
		chr_beg = int(col[1]) + 1
		chr_end = int(col[2])
		txid = col[3]
		score = col[4]
		strand = col[5]
		cds_beg = int(col[6]) + 1
		cds_end = int(col[7])
		rgb = col[8]
		n = int(col[9])
		sizes = col[10].split(',')
		starts = col[11].split(',')
		gid = re.search('(\w+)\.\d+', txid)[1]
		attr = 'ID=' + txid + ';Parent=' + gid

		# create the gene entry if necessary
		if gid not in genes:
			print('\t'.join([chr_id, 'araport', 'gene', str(chr_beg),
				str(chr_end), score, strand, '.', 'ID='+gid]))
			genes[gid] = True

		# create the mRNA entry
		print('\t'.join([chr_id, 'araport', 'mRNA', str(chr_beg),
			str(chr_end), score, strand, attr]))

		# create the exons and CDS
		for i in range(n):
			beg = chr_beg + int(starts[i])
			end = beg + int(sizes[i]) -1
			attr = 'Parent=' + txid
			print('\t'.join([chr_id, 'araport', 'exon', str(beg), str(end),
				score, strand, ',', attr]))
			if beg <= cds_end and end >= cds_beg:
				cb, ce = None, None
				if beg > cds_beg: cb = beg
				else:             cb = cds_beg
				if end > cds_end: ce = cds_end
				else:             ce = end
				print('\t'.join([chr_id, 'araport', 'CDS', str(cb),
					str(ce), score, strand, '.', attr]))

def convert_from_gtf():
	genes = {}
	add_stop = None
	file = []
	stops = []
	#Process and pull into memory
	for line in sys.stdin:
		if line[0:1]=='#': continue
		col = line.rstrip().split('\t')
		entry = toolbox.GFF_entry(col)
		if entry.type == 'stop_codon':
			stops.append(entry)
			continue
		file.append(entry)
	#Post Processing and Check for Formatting
	for entry in file:
		#Check for stops
		for stop in stops:
			if entry.chrom != stop.chrom: continue
			if entry.strand != stop.strand: continue
			if entry.strand == '+':
				if entry.end == stop.beg - 1:
					entry.end = entry.end + 3
				continue
			if entry.strand == '-':
				if entry.beg == stop.end + 1:
					entry.beg = entry.beg - 3
				continue
		#Exceptions
		if entry.type == 'transcript':
			entry.type = 'mRNA'
		elif entry.type == 'three_prime_utr' or entry.type == 'five_prime_utr' or entry.type == 'start_codon':
			del entry
			continue
		#Convert Features Colomn to Dictionary
		attr = entry.attr.split('; ')
		features = {}
		for feature in attr:
			temp = feature.replace('"','')
			temp = temp.split(' ')
			features.update({temp[0]:temp[1]})
		#Rewrite last colomn in GFF3 format
		if entry.type == 'gene':
			entry.attr = 'ID=Gene:'+features['gene_id']
		if entry.type == 'exon':
			entry.attr = 'Parent=Transcript:'+features['transcript_id']
		if entry.type == 'mRNA':
			entry.attr = 'ID=Transcript:'+features['transcript_id']+';Parent=Gene:'+features['gene_id']
		if entry.type == 'CDS':
			entry.attr = 'Parent=Transcript:'+features['transcript_id']
		updated_line = "\t".join([entry.chrom,entry.source,entry.type,
			str(entry.beg),str(entry.end),entry.score,entry.strand,entry.phase,entry.attr])
		print(updated_line)


if __name__ == '__main__':
	if   arg.source == 'wb':   convert_from_wormbase()
	elif arg.source == 'fb':   convert_from_flybase()
	elif arg.source == 'tair': convert_from_tair()
	elif arg.source == 'ap':   convert_from_araport()
	elif arg.source == 'gtf':  convert_from_gtf()
	else: raise KalkiError('unrecognized source: ' + arg.source)
	
