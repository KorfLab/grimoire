#!/usr/bin/env python3

import argparse
import sys
import json
import os

import grimoire.hmm as hmm

## Command line stuff ##

extended_help = """
%(prog)s is used for assembling HMMs from previously trained States and State
Arrays. The HMMs are structured as JSON files.
"""

parser = argparse.ArgumentParser(
	description='HMM builder genes and their components.',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=extended_help)
parser.add_argument('--dir', required=True, type=str,
	metavar='<path>', help='path to directory containing trained states')
parser.add_argument('--model', required=True, type=str,
	metavar='<model>', help='acc|don|exon|intron|mRNA1|mRNA2|gene')
parser.add_argument('--hmm', required=True, type=str,
	metavar='<path>', help='output HMM file')
parser.add_argument('--null', required=False, type=str, default='NULL-genomic-5.json',
	metavar='<path>', help='null state file')
parser.add_argument('--acc', required=False, type=str, default='ACC-gene_models-2-2-1.json',
	metavar='<path>', help='acceptor state array file')
parser.add_argument('--don', required=False, type=str, default='DON-gene_models-2-2-1.json',
	metavar='<path>', help='donor state array file')
parser.add_argument('--exon', required=False, type=str, default='EXON-gene_models-3.json',
	metavar='<path>', help='exon state file')
parser.add_argument('--gen', required=False, type=str, default='GEN-genomic-4.json',
	metavar='<path>', help='genomic state file')
parser.add_argument('--int', required=False, type=str, default='INT-gene_models-3.json',
	metavar='<path>', help='intron state file')
parser.add_argument('--utr5', required=False, type=str, default='UTR5-gene_models-3.json',
	metavar='<path>', help='UTR5 state file')
parser.add_argument('--utr3', required=False, type=str, default='UTR3-gene_models-3.json',
	metavar='<path>', help='UTR3 state file')
parser.add_argument('--koz', required=False, type=str, default='KOZ-gene_models-10-3-0.json',
	metavar='<path>', help='Kozak state array file')
parser.add_argument('--cds', required=False, type=str, default='CDS-gene_models-4.json',
	metavar='<path>', help='CDS state file')
parser.add_argument('--ter', required=False, type=str, default='TER-gene_models-3-10-0.json',
	metavar='<path>', help='transcription termination state array file')

arg = parser.parse_args()

###############
## Functions ##
###############

class LomilwaError(Exception):
	pass

def check_training(states):
	errors = []
	for state in states:
		if not os.path.exists(arg.dir + '/' + state):
			errors.append('parameter combination not trained for {} state(s)'.format(state))
	if errors:
		raise MilwaError('\n'.join(errors))

def read_state(statefile):
	with open(arg.dir + '/' + statefile) as file:
		state = hmm.State.from_json(file.read())
	return state

def read_states(statefile):
	states = []
	with open(arg.dir + '/' + statefile) as file:
		for jstr in json.loads(file.read()):
			states.append(hmm.State.from_json(json.dumps(jstr)))# also not working
	return states

############################
## Model Building Section ##
############################
if not os.path.exists(arg.dir + '/stats.json'):
	raise MilwaError('{}/stats.json missing'.format(arg.dir))

stats = None
with open(arg.dir + '/stats.json') as file:
	stats = json.loads(file.read())
file.close()

model = None

if arg.model == 'don':
	states = [arg.exon, arg.don, arg.int, arg.null]
	check_training(states)
	exon_state = read_state(arg.exon)
	don_states = read_states(arg.don)
	int_state = read_state(arg.int)
	null_state = read_state(arg.null)
	hmm.connect2(exon_state, exon_state, 1 - stats['exon_count']/stats['exon_length'])
	hmm.connect2(exon_state, don_states[0], stats['exon_count']/stats['exon_length'])
	hmm.connect_all(don_states)
	hmm.connect2(don_states[-1], int_state, 1)
	hmm.connect2(int_state, int_state, 1)
	model = hmm.HMM(name=arg.hmm, null=null_state,
		states= [exon_state] + don_states + [int_state])
	
else:
	raise MilwaError('unknown model type: ' + arg.model)


""""
elif arg.model == 'acc':
	
	hmm.connect2(int_state, int_state, 1 - splices/intron_len)
	hmm.connect2(int_state, acc_states[0], splices/intron_len)
	hmm.connect_all(acc_states)
	hmm.connect2(acc_states[arg.acc_len-1], exn_state, 1)
	hmm.connect2(exn_state, exn_state, 1)
	
	null_state = hmm.null_state_factory(file=arg.fasta, context=arg.null_ctx)
	
	model = hmm.HMM(name=arg.hmm, null=null_state,
		states=[int_state] + acc_states + [exn_state])

elif arg.model == 'exon':
	
	hmm.connect2(inta_state, inta_state, 1 - splices/inta_len)
	hmm.connect2(inta_state, acc_states[0], splices/inta_len)
	hmm.connect_all(acc_states)
	hmm.connect2(acc_states[-1], exon_state, 1)
	hmm.connect2(exon_state, exon_state, 1 - splices/exon_len)
	hmm.connect2(exon_state, don_states[0], splices/exon_len)
	hmm.connect_all(don_states)
	hmm.connect2(don_states[-1], intb_state, 1)
	hmm.connect2(intb_state, intb_state, 1)
	
	null_state = hmm.null_state_factory(file=arg.fasta, context=arg.null_ctx)
	
	model = hmm.HMM(name=arg.hmm, states=[inta_state] + acc_states + [exon_state]
		+ don_states + [intb_state], null = null_state)

elif arg.model == 'intron':

	hmm.connect2(exp_state, exp_state, 1 - splices/exon_len)
	hmm.connect2(exp_state, don_states[0], splices/exon_len)
	hmm.connect_all(don_states)
	hmm.connect2(don_states[arg.don_len-1], int_state, 1)
	hmm.connect2(int_state, int_state, 1 - splices/intron_len)
	hmm.connect2(int_state, acc_states[0], splices/intron_len)
	hmm.connect_all(acc_states)
	hmm.connect2(acc_states[arg.acc_len-1], exn_state, 1)
	hmm.connect2(exn_state, exn_state, 1)
	
	null_state = hmm.null_state_factory(file=arg.fasta, context=arg.null_ctx)
	
	model = hmm.HMM(name=arg.hmm, null=null_state,
		states=[exp_state] + don_states + [int_state] + acc_states + [exn_state])

elif arg.model == 'gene':

	hmm.connect2(gen_state, gen_state, 0.999)
	hmm.connect2(gen_state, exon_state, 0.001)
	hmm.connect2(exon_state, exon_state, 0.95)
	hmm.connect2(exon_state, gen_state, 0.01)
	hmm.connect2(exon_state, don_states[0], 0.04)
	hmm.connect_all(don_states)
	hmm.connect2(don_states[-1], int_state, 1)
	hmm.connect2(int_state, int_state, 0.99)
	hmm.connect2(int_state, acc_states[0], 0.01)
	hmm.connect_all(acc_states)
	hmm.connect2(acc_states[-1], exon_state, 1)
	
	null_state = hmm.null_state_factory(file=arg.fasta, context=arg.null_ctx)
	
	model = hmm.HMM(name=arg.hmm, null=null_state,
		states=[gen_state] + [exon_state] + don_states + [int_state] + acc_states)

elif arg.model == 'mRNA':

	hmm.connect2(u5_state, u5_state, 1 - mRNAs/ut5_len)
	hmm.connect2(u5_state, koz_states[0], mRNAs/ut5_len)
	hmm.connect_all(koz_states)
	hmm.connect2(koz_states[-1], atg_states[0], 1)
	hmm.connect_all(atg_states)
	hmm.connect2(atg_states[-1], cds_states[0], 1)
	hmm.connect_all(cds_states)
	hmm.connect2(cds_states[2], cds_states[0], 1 - mRNAs / (cds_len/3))
	hmm.connect2(cds_states[2], stp_states[0], mRNAs / (cds_len/3))
	hmm.connect_all(stp_states)
	hmm.connect2(stp_states[-1], u3_state, 1)
	hmm.connect2(u3_state, u3_state, 1)
	
	null_state = hmm.null_state_factory(file=arg.fasta, context=arg.null_ctx)
	
	model = hmm.HMM(name=arg.hmm, states=[u5_state] + koz_states + atg_states
		+ cds_states + [u3_state] + stp_states, null=null_state)
"""

model.write(arg.hmm)
