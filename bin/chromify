#!/usr/bin/env python3

import argparse
import sys

from grimoire.sequence import DNA
from grimoire.genome import Genome, Feature, mRNA, ProteinCodingGene

## Command line stuff ##

parser = argparse.ArgumentParser(description='Converts to single strand genes')
parser.add_argument('--fasta', required=True, type=str,
	metavar='<path>', help='path to input fasta file (%(type)s)')
parser.add_argument('--gff3', required=True, type=str,
	metavar='<path>', help='path to input GFF3 file (%(type)s)')
parser.add_argument('--out', required=True, type=str,
	metavar='<str>', help='output name for fasta and gff (%(type)s)')
parser.add_argument('--split', required=False, type=int, default=1,
	metavar='<int>', help='split into <int> parts [%(default]d)')
parser.add_argument('--padding', required=False, type=int, default=100,
	metavar='<int>', help='length of flanking sequence [%(default)d]')
arg = parser.parse_args()

## Main ##

def chromify(feature, beg, end):
	dna = DNA(seq=feature.dna.seq[beg:end], name=feature.id + '-remapped')
	gene = ProteinCodingGene(dna, feature.beg -beg, feature.end -beg,
		feature.strand, 'gene', id=feature.parent_id)
	tx = mRNA(dna, feature.beg -beg, feature.end -beg,
		feature.strand, 'mRNA', id=feature.id, parent_id=gene.id)
	for child in feature.children:
		tx.add_child(Feature(dna, child.beg -beg, child.end -beg,
			child.strand, child.type, parent_id=child.parent_id))
	gene.add_child(tx)
	dna.features.append(gene)
	if feature.strand == '-': dna.revcomp()
	return dna

fp = []
if arg.split:
	for i in range(arg.split):
		fp.append({
			'gf':open(arg.out + '-' + str(i) + '.gff3', 'w+'),
			'ff':open(arg.out + '-' + str(i) + '.fasta', 'w+'),
		})

count = 0
gen = Genome(gff3=arg.gff3, fasta=arg.fasta)
for chr in gen.chromosomes:
	for gene in chr.features:
		if not gene.mRNAs(): continue
		tx = gene.mRNAs()[0]
		if tx.issues: continue
		rbeg = tx.beg - arg.padding -1
		rend = tx.end + arg.padding +1
		if rbeg < 1 or rend > len(chr.seq): continue
		dna = chromify(tx, rbeg, rend)
		set = count % arg.split
		count += 1
		fp[set]['gf'].write(dna.features[0].gff())
		fp[set]['ff'].write(dna.fasta())

		