#!/usr/bin/env python3

import argparse
import os
import sys

from grimoire.genome import Reader

#######
# CLI #
#######

extended_help = """
latumapic provides svg images of genome annotations. It requires a fasta file of
the sequences and gff file of the annotaions. Each record in a fasta file gets
its own svg. If the output directory is set to 'foo' and the identifier is
'bar', the image is saved as foo/bar.svg.
"""

parser = argparse.ArgumentParser(
	description='svg-based genome visualizer',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=extended_help)
parser.add_argument('fasta', type=str, metavar='<fasta>',
	help='path to fasta file')
parser.add_argument('gff', type=str, metavar='<gff>',
	help='path to gff file')
parser.add_argument('out', type=str, metavar='<out dir>',
	help='path to output directory')
# many customization options to follow
arg = parser.parse_args()

###########
# Classes # move these to grimoire proper later and include unit tests
###########

class Figure():

	def __init__(self, dna, filename, title=None):
		self.filename = filename # eventually
		self.tracks = []
		self.width = len(dna.seq)

	def add_track(self, track):
		self.tracks.append(track)

	def height(self):
		return 100 # need to add up header, body, footer

	def svg(self, size=10):
		xmlns = 'xmlns="http://www.w3.org/2000/svg"'
		vbox = f'viewBox="0 0 {self.width} {self.height()}"'
		out = []
		out.append(f'<svg {vbox} {xmlns}>') # begin
		# header
		# body
		# footer
		# decorations
		out.append('</svg>') # end

class Track():

	# track x-coordiantes are nucleotide coordinats
	# track y-coordinates are 0 (modified elsewhere)

	def __init__(self, text=None):
		self.text = text
		self.stuff = [] # the various elements in the track
		self.size = 0

	def add_exon(self, f, title=None):
		pass
		# just a box with specific color scheme

	def add_cds(self, f, title=None):
		pass
		# just a box with a specific color scheme

	def add_intron(self, f, title=None):
		pass
		# poly-line with elbow

	def add_wiggle(self, a, title=None):
		pass

	def add_arrow(self, a, title=None):
		pass

	def add_transcript(self, gene):
		pass

class Box():

	def __init__(self, beg, end, size, color='black', text=None):
		self.beg = beg
		self.end = end
		self.size = size
		self.color = color
		self.text = text
	
	def svg(self, y):
		pass # need to pass in y always

class Line():

	def __init__(self, beg, end, size, color='black', text=None):
		self.beg = beg
		self.end = end
		self.size = size
		self.color = color
		self.text = text
	
	def svg(self, y):
		pass # need to pass in y always


########
# Main #
########

if not os.path.exists(arg.out): os.mkdir(arg.out)

for chrom in Reader(arg.fasta, arg.gff):
	fig = Figure(chrom, f'{arg.out}/{chrom.name}.svg')
	print(fig.filename)
	for gene in chrom.ftable.build_genes():
		for tx in gene.transcripts():
			track = Track(title=tx.id)
			fig.add_track(track)
			for exon in tx.exons:
				track.add_exon(exon)
			for intron in tx.introns:
				track.add_intron(intron)
			for cds in tx.cdss:
				track.add_cds(cds)
	# make up some other elements


"""
set viewbox to actual size and then use absolute pixel coordinates

circle/ellipse for decorations
line
rect - can have rounded corners
text - of course
title - use for mouse-over text, make it the first element inside
	use to label the name of the gene
	use to label the intron consensus?

"""
