#!/usr/bin/env python3

import argparse
import sys
import json

import grimoire.genome as genome
from grimoire.feature import FeatureTable

## Command line stuff ##

extended_help = """
%(prog)s is used for comparing sequence features between two sources. In
a gene prediction setting this would be predictions vs. reference, but
it could also be two genome annotation pipelines or two versions
produced at different times. All of the features must reference the same
exact chromosomes.

The --format option allows you to choose how you want the report
displayed. At level 0, this is simply a trio of numbers counting the
diff, same, or total. At level 1, there will be feature-level comparisons
when implemented.
"""

parser = argparse.ArgumentParser(
	description='Compares two sets of genome annotations.',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=extended_help)
parser.add_argument('--fasta', required=True, type=str,
	metavar='<path>', help='path to fasta file')
parser.add_argument('--file1', required=True, type=str,
	metavar='<path>', help='path to file1 in gff')
parser.add_argument('--file2', required=True, type=str,
	metavar='<path>', help='path to file2 in gff')
parser.add_argument('--cds', required=False, type=str,
	metavar='<path>', help='type of feature to compare')
arg = parser.parse_args()

class LatumapicError(Exception):
	pass

def gene_stuff(chrom):
	genes = chrom.ftable.build_genes()
	stuff = []
	for gene in genes:
		for tx in gene.transcripts():
			for exon in tx.exons: stuff.append(exon)
			for cds in tx.cdss: stuff.append(cds)
			for intron in tx.introns: stuff.append(intron)
			for u5 in tx.utr5s: stuff.append(u5)
			for u3 in tx.utr3s: stuff.append(u3)
	return FeatureTable(dna=chrom, features=stuff)

if __name__ == '__main__':

	g1 = genome.Reader(fasta=arg.fasta, gff=arg.file1)
	g2 = genome.Reader(fasta=arg.fasta, gff=arg.file2)
	
	for c1, c2 in zip(g1, g2):
		# feature-level comparisions
		d = c1.ftable.nt_compare(c2.ftable)
		print(d)
		
		# gene-level comparisons
		gt1 = gene_stuff(c1)		
		gt2 = gene_stuff(c2)
		d = gt1.nt_compare(gt2)
		print(d)
			
	
	

