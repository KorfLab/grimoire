#!/usr/bin/env python3

import argparse
import sys
import json
import math

import grimoire.genome as genome
from grimoire.feature import FeatureTable

## Command line stuff ##

extended_help = """

morlis is designed to compare two sets of protein-coding gene
annotations. Traditionally, this would be reference vs. prediciton, but
it could also be two separate pipelines or the same pipeline at
different times. Note that all of the features must reference the same
exact same chromosome sequences.

There are several modes the program can operate in:

	+ nt - nucleotide
	+ tx - transcript


In 'nt' mode, there is an assumption that every letter can be uniquely
labeled as CDS or intergenic. In cases of multiple isoforms, CDS has
priority over intergenic. Strand is ignored.

In 'tx' mode...

"""

parser = argparse.ArgumentParser(
	description='Compares two sets of genome annotations.',
	formatter_class=argparse.RawDescriptionHelpFormatter,
	epilog=extended_help)
parser.add_argument('--fasta', required=True, type=str,
	metavar='<path>', help='path to fasta file')
parser.add_argument('--file1', required=True, type=str,
	metavar='<path>', help='path to file1 in gff')
parser.add_argument('--file2', required=True, type=str,
	metavar='<path>', help='path to file2 in gff')
parser.add_argument('--mode', required=True, type=str,
	metavar='<mode>', help='nt|gbm|rbm|lkd')
parser.add_argument('--s1', required=False, type=float, default=0.1,
	metavar='<score>', help='score for each coding nt [%(default)f]')
parser.add_argument('--s2', required=False, type=float, default=50,
	metavar='<score>', help='score for matching fence post [%(default)f]')
parser.add_argument('--s3', required=False, type=float, default=-10,
	metavar='<score>', help='score for missing fence post [%(default)f]')

arg = parser.parse_args()

class MorlisError(Exception):
	pass

def label_sequence(chrom):
	genes = chrom.ftable.build_genes()
	aseq = []
	for i in range(len(chrom.seq)):
		aseq.append('n')
		
	for gene in genes:
		for tx in gene.transcripts():
			for cds in tx.cdss:
				for i in range(cds.beg, cds.end +1):
					aseq[i-1] = 'c'
	
	return aseq

def nt_compare(g1, g2):
	same, diff = 0, 0
	tp, tn, fp, fn = 0, 0, 0, 0
	for c1, c2 in zip(g1, g2):
		s1 = label_sequence(c1)
		s2 = label_sequence(c2)
		for i in range(len(s1)):
			if   s1[i] == 'c' and s2[i] == 'c': tp += 1
			elif s1[i] == 'n' and s2[i] == 'n': tn += 1
			elif s1[i] == 'c' and s2[i] == 'n': fn += 1
			elif s1[i] == 'n' and s2[i] == 'c': fp += 1
		
			if s1[i] == s2[i]: same += 1
			else:              diff += 1
	
	print('NT_accuracy:\t{:.3f}'.format(same / (same + diff)))
	print('NT_sensitivity:\t{:.3f}'.format(tp / (tp + fn)))
	print('NT_specificity:\t{:.3f}'.format(tp / (tp + fp)))

def build_transcripts(chr):
	genes = chr.ftable.build_genes()
	txs = FeatureTable(dna=chr)
	for gene in genes:
		sum = 0
		dots = False
		nums = False
		for tx in gene.transcripts():
			if type(tx.score) is float:
				if tx.score >= 0 and tx.score <= 1:
					sum += tx.score
					nums = True
				else:
					raise MorlisError('tx scores must be probabilities or .')
			elif type(tx.score) is str:
				if tx.score == '.':
					dots = True
				else:
					raise MorlisError('tx scores must be numeric or .')
			else:
				raise MorlisError('wtfdyd')
		
		if nums and dots:
			raise MorlisError('all tx scores must be numbers or unspecified')

		if sum == 0:
			for tx in gene.transcripts():
				tx.score = 1 / len(gene.transcripts())
			sum = 1

		if not math.isclose(1, sum, abs_tol=1e-6):
			raise MorlisError('tx sum is not close to 1.0')
		
		for tx in gene.transcripts():
			txs.add_feature(tx)
	
	return txs

def similarity_score(tx1, tx2):
	shared_cds, fence_same, fence_diff = 0, 0, 0
	for cds1 in tx1.cdss:
		for cds2 in tx2.cdss:
			if cds1.beg == cds2.beg: fence_same += 1
			else:                    fence_diff += 1
			if cds1.end == cds2.end: fence_same += 1
			else:                    fence_diff += 1
			
			if cds1.overlap(cds2):
				beg, end = 0, 0
				if cds1.beg > cds2.beg: beg = cds1.beg
				else:                   beg = cds2.beg
				if cds1.end < cds2.end: end = cds1.end
				else:                   end = cds2.end
				shared_cds += end - beg + 1
	
	score = shared_cds * arg.s1 + fence_same * arg.s2 - fence_diff * arg.s3
	return score

def similarity_matrix(txs1, txs2):
	smat = {}
	for tx1 in txs1.features:
		smat[tx1] = {}
		for tx2 in txs2.fetch(tx1.beg, tx1.end):
			smat[tx1][tx2] = {
				'score' : similarity_score(tx1, tx2),
				'used' : False
			}
	return smat

def label_tx(beg, end, tx):
	aseq = []
	for i in range(end - beg + 1): aseq.append('n')
	for cds in tx.cdss:
		for i in range(cds.beg, cds.end +1):
			aseq[i - beg] = 'c'
	return aseq

def tx_compare(g1, g2):
	TP, TN, FP, FN, TOT = 0, 0, 0, 0, 0
	for c1, c2 in zip(g1, g2):
		txs1 = build_transcripts(c1)
		txs2 = build_transcripts(c2)
		smx = similarity_matrix(txs1, txs2)

		# score all the transcripts that match
		while True:
			max_score = 0
			max_t1 = None
			max_t2 = None
			for t1 in smx:
				for t2 in smx[t1]:
					if smx[t1][t2]['used']: continue
					if smx[t1][t2]['score'] > max_score:
						max_score = smx[t1][t2]['score']
						max_t1 = t1
						max_t2 = t2
			if max_t1 == None: break
			
			for t1 in smx:
				for t2 in smx[t1]:
					if t1 == max_t1 or t2 == max_t2:
						smx[t1][t2]['used'] = True
			
			# calculate similarity of these best matching transcripts
			tp, fp, tn, fn = 0, 0, 0, 0
			beg, end = 0, 0
			if max_t1.beg < max_t2.beg: beg = max_t1.beg
			else:                       beg = max_t2.beg
			if max_t1.end > max_t2.end: end = max_t1.end
			else:                       end = max_t2.end
			
			a1 = label_tx(beg, end, max_t1)
			a2 = label_tx(beg, end, max_t2)
			for i in range(len(a1)):
				if a1[i] == 'c':
					if a2[i] == 'c': tp += 1
					else:            fn += 1
				elif a1[i] == 'n':
					if a2[i] == 'n': tn += 1 # not actually using
					else:            fp += 1
			
			# normalize values by expression level
			tp = tp * max_t1.score
			fp = fp * max_t1.score
			tn = tn * max_t1.score
			fn = fn * max_t1.score
			TP += tp
			TN += tn
			FP += fp
			FN += fn
			TOT += max_t1.score # or is this + 1?

		# what about stuff that didn't get paired?
		for tx1 in smx:
			for tx2 in smx[tx1]:
				if smx[tx1][tx2]['used'] == False:
					print('see...')
		
		
	print(TP, TN, FP, FN, TOT)
	print('TX_sensitivity:\t{:.3f}'.format(TP / (TP + FN)))
	print('TX_specificity:\t{:.3f}'.format(TP / (TP + FP)))

if __name__ == '__main__':

	g1 = genome.Reader(fasta=arg.fasta, gff=arg.file1)
	g2 = genome.Reader(fasta=arg.fasta, gff=arg.file2)
	
	if   arg.mode == 'nt': nt_compare(g1, g2)
	elif arg.mode == 'tx': tx_compare(g1, g2)
	else: raise MorlisError('no such program mode')

	




























