#!/usr/bin/env python3

import argparse
import re

parser = argparse.ArgumentParser(description='GFF3 gene feature selector')
parser.add_argument('--file', required=True, type=str,
	metavar='<path>', help='path to annotation file (%(type)s)')
parser.add_argument('--source', required=True, type=str,
	metavar='<string>', help='wb|fb|tair|ap (%(type)s)')
arg = parser.parse_args()

types = {
	'gene' : True,
	'mRNA' : True,
	'exon' : True,
	'CDS' : True,
	'five_prime_utr' : True,
	'three_prime_utr' : True,
}

if arg.source == 'wb':
	with open(arg.file) as file:
		for line in file:
			if line[0:1] == '#': continue
			col = line.rstrip().split('\t')
			if col[1] == 'WormBase' and col[2] in types:
				m = re.search('pseudogene', col[8], re.IGNORECASE)
				if m: continue
				print(line, end='')

if arg.source == 'fb':
	with open(arg.file) as file:
		for line in file:
			if line[0:1] == '#':
				if line[0:7] == '##FASTA':break
				else: continue
			col = line.rstrip().split('\t')
			if col[1] == 'FlyBase' and col[2] in types:
				# SO:0000043 is the SO tag for 'processed_psedudogene'
				m = re.search('SO:0000043', col[8])
				if m: continue
				print(line, end='')

if arg.source == 'tair':
	with open(arg.file) as file:
		for line in file:
			if line[0:1] == '#': continue
			col = line.rstrip().split('\t')
			if col[2] in types:
				m = re.search('pseud', col[2])
				if m: continue
				print(line, end='')


if arg.source == 'ap':
	genes = {}
	with open(arg.file) as file:
		for line in file:
			col = line.split('\t')
			if len(col) < 12: continue
			chr_id = col[0]
			chr_beg = int(col[1]) + 1
			chr_end = int(col[2])
			txid = col[3]
			score = col[4]
			strand = col[5]
			cds_beg = int(col[6]) + 1
			cds_end = int(col[7])
			rgb = col[8]
			n = int(col[9])
			sizes = col[10].split(',')
			starts = col[11].split(',')
			gid = re.search('(\w+)\.\d+', txid)[1]
			attr = 'ID=' + txid + ';Parent=' + gid
		
			# create the gene entry if necessary
			if gid not in genes:
				print('\t'.join([chr_id, 'araport', 'gene', str(chr_beg),
					str(chr_end), score, strand, 'ID='+gid]))
				genes[gid] = True
			
			# create the mRNA entry
			print('\t'.join([chr_id, 'araport', 'mRNA', str(chr_beg),
				str(chr_end), score, strand, attr]))

			# create the exons (also need utrs and cds)
			for i in range(n):
				beg = chr_beg + int(starts[i])
				end = beg + int(sizes[i]) -1
				attr = 'Parent=' + txid
				print('\t'.join([chr_id, 'araport', 'exon', str(beg), str(end),
					score, strand, attr]))
			
			

